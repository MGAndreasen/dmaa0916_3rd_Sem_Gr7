//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Booking.Test.ServiceRemote {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRemote.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Post", ReplyAction="http://tempuri.org/IService/PostResponse")]
        string Post(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Post", ReplyAction="http://tempuri.org/IService/PostResponse")]
        System.Threading.Tasks.Task<string> PostAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRoute", ReplyAction="http://tempuri.org/IService/GetRouteResponse")]
        string[] GetRoute(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRoute", ReplyAction="http://tempuri.org/IService/GetRouteResponse")]
        System.Threading.Tasks.Task<string[]> GetRouteAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateDeparture", ReplyAction="http://tempuri.org/IService/CreateDepartureResponse")]
        void CreateDeparture(Booking.Models.Departure obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateDeparture", ReplyAction="http://tempuri.org/IService/CreateDepartureResponse")]
        System.Threading.Tasks.Task CreateDepartureAsync(Booking.Models.Departure obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDeparture", ReplyAction="http://tempuri.org/IService/GetDepartureResponse")]
        Booking.Models.Departure GetDeparture(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDeparture", ReplyAction="http://tempuri.org/IService/GetDepartureResponse")]
        System.Threading.Tasks.Task<Booking.Models.Departure> GetDepartureAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateDeparture", ReplyAction="http://tempuri.org/IService/UpdateDepartureResponse")]
        void UpdateDeparture(Booking.Models.Departure obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateDeparture", ReplyAction="http://tempuri.org/IService/UpdateDepartureResponse")]
        System.Threading.Tasks.Task UpdateDepartureAsync(Booking.Models.Departure obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteDeparture", ReplyAction="http://tempuri.org/IService/DeleteDepartureResponse")]
        void DeleteDeparture(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteDeparture", ReplyAction="http://tempuri.org/IService/DeleteDepartureResponse")]
        System.Threading.Tasks.Task DeleteDepartureAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllDepartures", ReplyAction="http://tempuri.org/IService/GetAllDeparturesResponse")]
        Booking.Models.Departure[] GetAllDepartures();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllDepartures", ReplyAction="http://tempuri.org/IService/GetAllDeparturesResponse")]
        System.Threading.Tasks.Task<Booking.Models.Departure[]> GetAllDeparturesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTilbud", ReplyAction="http://tempuri.org/IService/GetAllTilbudResponse")]
        Booking.Models.Departure[] GetAllTilbud();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllTilbud", ReplyAction="http://tempuri.org/IService/GetAllTilbudResponse")]
        System.Threading.Tasks.Task<Booking.Models.Departure[]> GetAllTilbudAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateCustomer", ReplyAction="http://tempuri.org/IService/CreateCustomerResponse")]
        void CreateCustomer(Booking.Models.Customer obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateCustomer", ReplyAction="http://tempuri.org/IService/CreateCustomerResponse")]
        System.Threading.Tasks.Task CreateCustomerAsync(Booking.Models.Customer obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCustomer", ReplyAction="http://tempuri.org/IService/GetCustomerResponse")]
        Booking.Models.Customer GetCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCustomer", ReplyAction="http://tempuri.org/IService/GetCustomerResponse")]
        System.Threading.Tasks.Task<Booking.Models.Customer> GetCustomerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCustomer", ReplyAction="http://tempuri.org/IService/UpdateCustomerResponse")]
        void UpdateCustomer(Booking.Models.Customer obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCustomer", ReplyAction="http://tempuri.org/IService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task UpdateCustomerAsync(Booking.Models.Customer obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCustomer", ReplyAction="http://tempuri.org/IService/DeleteCustomerResponse")]
        void DeleteCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCustomer", ReplyAction="http://tempuri.org/IService/DeleteCustomerResponse")]
        System.Threading.Tasks.Task DeleteCustomerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllCustomers", ReplyAction="http://tempuri.org/IService/GetAllCustomersResponse")]
        Booking.Models.Customer[] GetAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllCustomers", ReplyAction="http://tempuri.org/IService/GetAllCustomersResponse")]
        System.Threading.Tasks.Task<Booking.Models.Customer[]> GetAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateBooking", ReplyAction="http://tempuri.org/IService/CreateBookingResponse")]
        void CreateBooking(Booking.Models.Bookings obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateBooking", ReplyAction="http://tempuri.org/IService/CreateBookingResponse")]
        System.Threading.Tasks.Task CreateBookingAsync(Booking.Models.Bookings obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBooking", ReplyAction="http://tempuri.org/IService/GetBookingResponse")]
        Booking.Models.Bookings GetBooking(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBooking", ReplyAction="http://tempuri.org/IService/GetBookingResponse")]
        System.Threading.Tasks.Task<Booking.Models.Bookings> GetBookingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBooking", ReplyAction="http://tempuri.org/IService/UpdateBookingResponse")]
        void UpdateBooking(Booking.Models.Bookings obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBooking", ReplyAction="http://tempuri.org/IService/UpdateBookingResponse")]
        System.Threading.Tasks.Task UpdateBookingAsync(Booking.Models.Bookings obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBooking", ReplyAction="http://tempuri.org/IService/DeleteBookingResponse")]
        void DeleteBooking(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBooking", ReplyAction="http://tempuri.org/IService/DeleteBookingResponse")]
        System.Threading.Tasks.Task DeleteBookingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBookings", ReplyAction="http://tempuri.org/IService/GetAllBookingsResponse")]
        Booking.Models.Bookings[] GetAllBookings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBookings", ReplyAction="http://tempuri.org/IService/GetAllBookingsResponse")]
        System.Threading.Tasks.Task<Booking.Models.Bookings[]> GetAllBookingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateCity", ReplyAction="http://tempuri.org/IService/CreateCityResponse")]
        void CreateCity(Booking.Models.City obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateCity", ReplyAction="http://tempuri.org/IService/CreateCityResponse")]
        System.Threading.Tasks.Task CreateCityAsync(Booking.Models.City obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCity", ReplyAction="http://tempuri.org/IService/GetCityResponse")]
        Booking.Models.City GetCity(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCity", ReplyAction="http://tempuri.org/IService/GetCityResponse")]
        System.Threading.Tasks.Task<Booking.Models.City> GetCityAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCity", ReplyAction="http://tempuri.org/IService/UpdateCityResponse")]
        void UpdateCity(Booking.Models.City obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCity", ReplyAction="http://tempuri.org/IService/UpdateCityResponse")]
        System.Threading.Tasks.Task UpdateCityAsync(Booking.Models.City obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCity", ReplyAction="http://tempuri.org/IService/DeleteCityResponse")]
        void DeleteCity(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCity", ReplyAction="http://tempuri.org/IService/DeleteCityResponse")]
        System.Threading.Tasks.Task DeleteCityAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateDestination", ReplyAction="http://tempuri.org/IService/CreateDestinationResponse")]
        void CreateDestination(Booking.Models.Destination obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateDestination", ReplyAction="http://tempuri.org/IService/CreateDestinationResponse")]
        System.Threading.Tasks.Task CreateDestinationAsync(Booking.Models.Destination obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDestination", ReplyAction="http://tempuri.org/IService/GetDestinationResponse")]
        Booking.Models.Destination GetDestination(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDestination", ReplyAction="http://tempuri.org/IService/GetDestinationResponse")]
        System.Threading.Tasks.Task<Booking.Models.Destination> GetDestinationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateDestination", ReplyAction="http://tempuri.org/IService/UpdateDestinationResponse")]
        void UpdateDestination(Booking.Models.Destination obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateDestination", ReplyAction="http://tempuri.org/IService/UpdateDestinationResponse")]
        System.Threading.Tasks.Task UpdateDestinationAsync(Booking.Models.Destination obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteDestination", ReplyAction="http://tempuri.org/IService/DeleteDestinationResponse")]
        void DeleteDestination(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteDestination", ReplyAction="http://tempuri.org/IService/DeleteDestinationResponse")]
        System.Threading.Tasks.Task DeleteDestinationAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllDestinations", ReplyAction="http://tempuri.org/IService/GetAllDestinationsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Security.SecurityException), Action="http://tempuri.org/IService/GetAllDestinationsSecurityExceptionFault", Name="SecurityException", Namespace="http://schemas.datacontract.org/2004/07/System.Security")]
        Booking.Models.Destination[] GetAllDestinations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllDestinations", ReplyAction="http://tempuri.org/IService/GetAllDestinationsResponse")]
        System.Threading.Tasks.Task<Booking.Models.Destination[]> GetAllDestinationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePassenger", ReplyAction="http://tempuri.org/IService/CreatePassengerResponse")]
        void CreatePassenger(Booking.Models.Passenger obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePassenger", ReplyAction="http://tempuri.org/IService/CreatePassengerResponse")]
        System.Threading.Tasks.Task CreatePassengerAsync(Booking.Models.Passenger obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPassenger", ReplyAction="http://tempuri.org/IService/GetPassengerResponse")]
        Booking.Models.Passenger GetPassenger(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPassenger", ReplyAction="http://tempuri.org/IService/GetPassengerResponse")]
        System.Threading.Tasks.Task<Booking.Models.Passenger> GetPassengerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdatePassenger", ReplyAction="http://tempuri.org/IService/UpdatePassengerResponse")]
        void UpdatePassenger(Booking.Models.Passenger obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdatePassenger", ReplyAction="http://tempuri.org/IService/UpdatePassengerResponse")]
        System.Threading.Tasks.Task UpdatePassengerAsync(Booking.Models.Passenger obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeletePassenger", ReplyAction="http://tempuri.org/IService/DeletePassengerResponse")]
        void DeletePassenger(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeletePassenger", ReplyAction="http://tempuri.org/IService/DeletePassengerResponse")]
        System.Threading.Tasks.Task DeletePassengerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPassengers", ReplyAction="http://tempuri.org/IService/GetAllPassengersResponse")]
        Booking.Models.Passenger[] GetAllPassengers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPassengers", ReplyAction="http://tempuri.org/IService/GetAllPassengersResponse")]
        System.Threading.Tasks.Task<Booking.Models.Passenger[]> GetAllPassengersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePayment", ReplyAction="http://tempuri.org/IService/CreatePaymentResponse")]
        void CreatePayment(Booking.Models.Payment obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePayment", ReplyAction="http://tempuri.org/IService/CreatePaymentResponse")]
        System.Threading.Tasks.Task CreatePaymentAsync(Booking.Models.Payment obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPayment", ReplyAction="http://tempuri.org/IService/GetPaymentResponse")]
        Booking.Models.Payment GetPayment(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPayment", ReplyAction="http://tempuri.org/IService/GetPaymentResponse")]
        System.Threading.Tasks.Task<Booking.Models.Payment> GetPaymentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdatePayment", ReplyAction="http://tempuri.org/IService/UpdatePaymentResponse")]
        void UpdatePayment(Booking.Models.Payment obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdatePayment", ReplyAction="http://tempuri.org/IService/UpdatePaymentResponse")]
        System.Threading.Tasks.Task UpdatePaymentAsync(Booking.Models.Payment obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeletePayment", ReplyAction="http://tempuri.org/IService/DeletePaymentResponse")]
        void DeletePayment(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeletePayment", ReplyAction="http://tempuri.org/IService/DeletePaymentResponse")]
        System.Threading.Tasks.Task DeletePaymentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePlane", ReplyAction="http://tempuri.org/IService/CreatePlaneResponse")]
        void CreatePlane(Booking.Models.Plane obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreatePlane", ReplyAction="http://tempuri.org/IService/CreatePlaneResponse")]
        System.Threading.Tasks.Task CreatePlaneAsync(Booking.Models.Plane obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlane", ReplyAction="http://tempuri.org/IService/GetPlaneResponse")]
        Booking.Models.Plane GetPlane(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPlane", ReplyAction="http://tempuri.org/IService/GetPlaneResponse")]
        System.Threading.Tasks.Task<Booking.Models.Plane> GetPlaneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdatePlane", ReplyAction="http://tempuri.org/IService/UpdatePlaneResponse")]
        void UpdatePlane(Booking.Models.Plane obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdatePlane", ReplyAction="http://tempuri.org/IService/UpdatePlaneResponse")]
        System.Threading.Tasks.Task UpdatePlaneAsync(Booking.Models.Plane obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeletePlane", ReplyAction="http://tempuri.org/IService/DeletePlaneResponse")]
        void DeletePlane(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeletePlane", ReplyAction="http://tempuri.org/IService/DeletePlaneResponse")]
        System.Threading.Tasks.Task DeletePlaneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPlanes", ReplyAction="http://tempuri.org/IService/GetAllPlanesResponse")]
        Booking.Models.Plane[] GetAllPlanes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPlanes", ReplyAction="http://tempuri.org/IService/GetAllPlanesResponse")]
        System.Threading.Tasks.Task<Booking.Models.Plane[]> GetAllPlanesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateSeat", ReplyAction="http://tempuri.org/IService/CreateSeatResponse")]
        void CreateSeat(Booking.Models.Seat obj, int planeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateSeat", ReplyAction="http://tempuri.org/IService/CreateSeatResponse")]
        System.Threading.Tasks.Task CreateSeatAsync(Booking.Models.Seat obj, int planeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSeat", ReplyAction="http://tempuri.org/IService/GetSeatResponse")]
        Booking.Models.Seat GetSeat(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSeat", ReplyAction="http://tempuri.org/IService/GetSeatResponse")]
        System.Threading.Tasks.Task<Booking.Models.Seat> GetSeatAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSeat", ReplyAction="http://tempuri.org/IService/UpdateSeatResponse")]
        void UpdateSeat(Booking.Models.Seat obj, int planeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSeat", ReplyAction="http://tempuri.org/IService/UpdateSeatResponse")]
        System.Threading.Tasks.Task UpdateSeatAsync(Booking.Models.Seat obj, int planeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteSeat", ReplyAction="http://tempuri.org/IService/DeleteSeatResponse")]
        void DeleteSeat(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteSeat", ReplyAction="http://tempuri.org/IService/DeleteSeatResponse")]
        System.Threading.Tasks.Task DeleteSeatAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateTicket", ReplyAction="http://tempuri.org/IService/CreateTicketResponse")]
        void CreateTicket(Booking.Models.Ticket obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateTicket", ReplyAction="http://tempuri.org/IService/CreateTicketResponse")]
        System.Threading.Tasks.Task CreateTicketAsync(Booking.Models.Ticket obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTicket", ReplyAction="http://tempuri.org/IService/GetTicketResponse")]
        Booking.Models.Ticket GetTicket(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTicket", ReplyAction="http://tempuri.org/IService/GetTicketResponse")]
        System.Threading.Tasks.Task<Booking.Models.Ticket> GetTicketAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateTicket", ReplyAction="http://tempuri.org/IService/UpdateTicketResponse")]
        void UpdateTicket(Booking.Models.Ticket obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateTicket", ReplyAction="http://tempuri.org/IService/UpdateTicketResponse")]
        System.Threading.Tasks.Task UpdateTicketAsync(Booking.Models.Ticket obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteTicket", ReplyAction="http://tempuri.org/IService/DeleteTicketResponse")]
        void DeleteTicket(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteTicket", ReplyAction="http://tempuri.org/IService/DeleteTicketResponse")]
        System.Threading.Tasks.Task DeleteTicketAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Booking.Test.ServiceRemote.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Booking.Test.ServiceRemote.IService>, Booking.Test.ServiceRemote.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Post(string s) {
            return base.Channel.Post(s);
        }
        
        public System.Threading.Tasks.Task<string> PostAsync(string s) {
            return base.Channel.PostAsync(s);
        }
        
        public string[] GetRoute(string id) {
            return base.Channel.GetRoute(id);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRouteAsync(string id) {
            return base.Channel.GetRouteAsync(id);
        }
        
        public void CreateDeparture(Booking.Models.Departure obj) {
            base.Channel.CreateDeparture(obj);
        }
        
        public System.Threading.Tasks.Task CreateDepartureAsync(Booking.Models.Departure obj) {
            return base.Channel.CreateDepartureAsync(obj);
        }
        
        public Booking.Models.Departure GetDeparture(int id) {
            return base.Channel.GetDeparture(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Departure> GetDepartureAsync(int id) {
            return base.Channel.GetDepartureAsync(id);
        }
        
        public void UpdateDeparture(Booking.Models.Departure obj) {
            base.Channel.UpdateDeparture(obj);
        }
        
        public System.Threading.Tasks.Task UpdateDepartureAsync(Booking.Models.Departure obj) {
            return base.Channel.UpdateDepartureAsync(obj);
        }
        
        public void DeleteDeparture(int id) {
            base.Channel.DeleteDeparture(id);
        }
        
        public System.Threading.Tasks.Task DeleteDepartureAsync(int id) {
            return base.Channel.DeleteDepartureAsync(id);
        }
        
        public Booking.Models.Departure[] GetAllDepartures() {
            return base.Channel.GetAllDepartures();
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Departure[]> GetAllDeparturesAsync() {
            return base.Channel.GetAllDeparturesAsync();
        }
        
        public Booking.Models.Departure[] GetAllTilbud() {
            return base.Channel.GetAllTilbud();
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Departure[]> GetAllTilbudAsync() {
            return base.Channel.GetAllTilbudAsync();
        }
        
        public void CreateCustomer(Booking.Models.Customer obj) {
            base.Channel.CreateCustomer(obj);
        }
        
        public System.Threading.Tasks.Task CreateCustomerAsync(Booking.Models.Customer obj) {
            return base.Channel.CreateCustomerAsync(obj);
        }
        
        public Booking.Models.Customer GetCustomer(int id) {
            return base.Channel.GetCustomer(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Customer> GetCustomerAsync(int id) {
            return base.Channel.GetCustomerAsync(id);
        }
        
        public void UpdateCustomer(Booking.Models.Customer obj) {
            base.Channel.UpdateCustomer(obj);
        }
        
        public System.Threading.Tasks.Task UpdateCustomerAsync(Booking.Models.Customer obj) {
            return base.Channel.UpdateCustomerAsync(obj);
        }
        
        public void DeleteCustomer(int id) {
            base.Channel.DeleteCustomer(id);
        }
        
        public System.Threading.Tasks.Task DeleteCustomerAsync(int id) {
            return base.Channel.DeleteCustomerAsync(id);
        }
        
        public Booking.Models.Customer[] GetAllCustomers() {
            return base.Channel.GetAllCustomers();
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Customer[]> GetAllCustomersAsync() {
            return base.Channel.GetAllCustomersAsync();
        }
        
        public void CreateBooking(Booking.Models.Bookings obj) {
            base.Channel.CreateBooking(obj);
        }
        
        public System.Threading.Tasks.Task CreateBookingAsync(Booking.Models.Bookings obj) {
            return base.Channel.CreateBookingAsync(obj);
        }
        
        public Booking.Models.Bookings GetBooking(int id) {
            return base.Channel.GetBooking(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Bookings> GetBookingAsync(int id) {
            return base.Channel.GetBookingAsync(id);
        }
        
        public void UpdateBooking(Booking.Models.Bookings obj) {
            base.Channel.UpdateBooking(obj);
        }
        
        public System.Threading.Tasks.Task UpdateBookingAsync(Booking.Models.Bookings obj) {
            return base.Channel.UpdateBookingAsync(obj);
        }
        
        public void DeleteBooking(int id) {
            base.Channel.DeleteBooking(id);
        }
        
        public System.Threading.Tasks.Task DeleteBookingAsync(int id) {
            return base.Channel.DeleteBookingAsync(id);
        }
        
        public Booking.Models.Bookings[] GetAllBookings() {
            return base.Channel.GetAllBookings();
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Bookings[]> GetAllBookingsAsync() {
            return base.Channel.GetAllBookingsAsync();
        }
        
        public void CreateCity(Booking.Models.City obj) {
            base.Channel.CreateCity(obj);
        }
        
        public System.Threading.Tasks.Task CreateCityAsync(Booking.Models.City obj) {
            return base.Channel.CreateCityAsync(obj);
        }
        
        public Booking.Models.City GetCity(int id) {
            return base.Channel.GetCity(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.City> GetCityAsync(int id) {
            return base.Channel.GetCityAsync(id);
        }
        
        public void UpdateCity(Booking.Models.City obj) {
            base.Channel.UpdateCity(obj);
        }
        
        public System.Threading.Tasks.Task UpdateCityAsync(Booking.Models.City obj) {
            return base.Channel.UpdateCityAsync(obj);
        }
        
        public void DeleteCity(int id) {
            base.Channel.DeleteCity(id);
        }
        
        public System.Threading.Tasks.Task DeleteCityAsync(int id) {
            return base.Channel.DeleteCityAsync(id);
        }
        
        public void CreateDestination(Booking.Models.Destination obj) {
            base.Channel.CreateDestination(obj);
        }
        
        public System.Threading.Tasks.Task CreateDestinationAsync(Booking.Models.Destination obj) {
            return base.Channel.CreateDestinationAsync(obj);
        }
        
        public Booking.Models.Destination GetDestination(int id) {
            return base.Channel.GetDestination(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Destination> GetDestinationAsync(int id) {
            return base.Channel.GetDestinationAsync(id);
        }
        
        public void UpdateDestination(Booking.Models.Destination obj) {
            base.Channel.UpdateDestination(obj);
        }
        
        public System.Threading.Tasks.Task UpdateDestinationAsync(Booking.Models.Destination obj) {
            return base.Channel.UpdateDestinationAsync(obj);
        }
        
        public void DeleteDestination(int id) {
            base.Channel.DeleteDestination(id);
        }
        
        public System.Threading.Tasks.Task DeleteDestinationAsync(int id) {
            return base.Channel.DeleteDestinationAsync(id);
        }
        
        public Booking.Models.Destination[] GetAllDestinations() {
            return base.Channel.GetAllDestinations();
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Destination[]> GetAllDestinationsAsync() {
            return base.Channel.GetAllDestinationsAsync();
        }
        
        public void CreatePassenger(Booking.Models.Passenger obj) {
            base.Channel.CreatePassenger(obj);
        }
        
        public System.Threading.Tasks.Task CreatePassengerAsync(Booking.Models.Passenger obj) {
            return base.Channel.CreatePassengerAsync(obj);
        }
        
        public Booking.Models.Passenger GetPassenger(int id) {
            return base.Channel.GetPassenger(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Passenger> GetPassengerAsync(int id) {
            return base.Channel.GetPassengerAsync(id);
        }
        
        public void UpdatePassenger(Booking.Models.Passenger obj) {
            base.Channel.UpdatePassenger(obj);
        }
        
        public System.Threading.Tasks.Task UpdatePassengerAsync(Booking.Models.Passenger obj) {
            return base.Channel.UpdatePassengerAsync(obj);
        }
        
        public void DeletePassenger(int id) {
            base.Channel.DeletePassenger(id);
        }
        
        public System.Threading.Tasks.Task DeletePassengerAsync(int id) {
            return base.Channel.DeletePassengerAsync(id);
        }
        
        public Booking.Models.Passenger[] GetAllPassengers() {
            return base.Channel.GetAllPassengers();
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Passenger[]> GetAllPassengersAsync() {
            return base.Channel.GetAllPassengersAsync();
        }
        
        public void CreatePayment(Booking.Models.Payment obj) {
            base.Channel.CreatePayment(obj);
        }
        
        public System.Threading.Tasks.Task CreatePaymentAsync(Booking.Models.Payment obj) {
            return base.Channel.CreatePaymentAsync(obj);
        }
        
        public Booking.Models.Payment GetPayment(int id) {
            return base.Channel.GetPayment(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Payment> GetPaymentAsync(int id) {
            return base.Channel.GetPaymentAsync(id);
        }
        
        public void UpdatePayment(Booking.Models.Payment obj) {
            base.Channel.UpdatePayment(obj);
        }
        
        public System.Threading.Tasks.Task UpdatePaymentAsync(Booking.Models.Payment obj) {
            return base.Channel.UpdatePaymentAsync(obj);
        }
        
        public void DeletePayment(int id) {
            base.Channel.DeletePayment(id);
        }
        
        public System.Threading.Tasks.Task DeletePaymentAsync(int id) {
            return base.Channel.DeletePaymentAsync(id);
        }
        
        public void CreatePlane(Booking.Models.Plane obj) {
            base.Channel.CreatePlane(obj);
        }
        
        public System.Threading.Tasks.Task CreatePlaneAsync(Booking.Models.Plane obj) {
            return base.Channel.CreatePlaneAsync(obj);
        }
        
        public Booking.Models.Plane GetPlane(int id) {
            return base.Channel.GetPlane(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Plane> GetPlaneAsync(int id) {
            return base.Channel.GetPlaneAsync(id);
        }
        
        public void UpdatePlane(Booking.Models.Plane obj) {
            base.Channel.UpdatePlane(obj);
        }
        
        public System.Threading.Tasks.Task UpdatePlaneAsync(Booking.Models.Plane obj) {
            return base.Channel.UpdatePlaneAsync(obj);
        }
        
        public void DeletePlane(int id) {
            base.Channel.DeletePlane(id);
        }
        
        public System.Threading.Tasks.Task DeletePlaneAsync(int id) {
            return base.Channel.DeletePlaneAsync(id);
        }
        
        public Booking.Models.Plane[] GetAllPlanes() {
            return base.Channel.GetAllPlanes();
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Plane[]> GetAllPlanesAsync() {
            return base.Channel.GetAllPlanesAsync();
        }
        
        public void CreateSeat(Booking.Models.Seat obj, int planeId) {
            base.Channel.CreateSeat(obj, planeId);
        }
        
        public System.Threading.Tasks.Task CreateSeatAsync(Booking.Models.Seat obj, int planeId) {
            return base.Channel.CreateSeatAsync(obj, planeId);
        }
        
        public Booking.Models.Seat GetSeat(int id) {
            return base.Channel.GetSeat(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Seat> GetSeatAsync(int id) {
            return base.Channel.GetSeatAsync(id);
        }
        
        public void UpdateSeat(Booking.Models.Seat obj, int planeId) {
            base.Channel.UpdateSeat(obj, planeId);
        }
        
        public System.Threading.Tasks.Task UpdateSeatAsync(Booking.Models.Seat obj, int planeId) {
            return base.Channel.UpdateSeatAsync(obj, planeId);
        }
        
        public void DeleteSeat(int id) {
            base.Channel.DeleteSeat(id);
        }
        
        public System.Threading.Tasks.Task DeleteSeatAsync(int id) {
            return base.Channel.DeleteSeatAsync(id);
        }
        
        public void CreateTicket(Booking.Models.Ticket obj) {
            base.Channel.CreateTicket(obj);
        }
        
        public System.Threading.Tasks.Task CreateTicketAsync(Booking.Models.Ticket obj) {
            return base.Channel.CreateTicketAsync(obj);
        }
        
        public Booking.Models.Ticket GetTicket(int id) {
            return base.Channel.GetTicket(id);
        }
        
        public System.Threading.Tasks.Task<Booking.Models.Ticket> GetTicketAsync(int id) {
            return base.Channel.GetTicketAsync(id);
        }
        
        public void UpdateTicket(Booking.Models.Ticket obj) {
            base.Channel.UpdateTicket(obj);
        }
        
        public System.Threading.Tasks.Task UpdateTicketAsync(Booking.Models.Ticket obj) {
            return base.Channel.UpdateTicketAsync(obj);
        }
        
        public void DeleteTicket(int id) {
            base.Channel.DeleteTicket(id);
        }
        
        public System.Threading.Tasks.Task DeleteTicketAsync(int id) {
            return base.Channel.DeleteTicketAsync(id);
        }
    }
}
